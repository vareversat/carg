// Mocks generated by Mockito 5.4.6 from annotations
// in carg/test/units/services/round/abstract_round_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:carg/models/carg_object.dart' as _i6;
import 'package:carg/models/game/setting/game_setting.dart' as _i3;
import 'package:carg/models/score/round/round.dart' as _i2;
import 'package:carg/models/score/score.dart' as _i1;
import 'package:carg/repositories/base_repository.dart' as _i7;
import 'package:carg/repositories/score/abstract_score_repository.dart' as _i5;
import 'package:carg/services/score/abstract_score_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i4;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbstractScoreRepository_0<
        T1 extends _i1.Score<_i2.Round<_i3.GameSetting>>> extends _i4.SmartFake
    implements _i5.AbstractScoreRepository<T1> {
  _FakeAbstractScoreRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseRepository_1<T1 extends _i6.CargObject> extends _i4.SmartFake
    implements _i7.BaseRepository<T1> {
  _FakeBaseRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbstractScoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractScoreService<T extends _i1.Score<_i2.Round<_i3.GameSetting>>>
    extends _i4.Mock implements _i8.AbstractScoreService<T> {
  MockAbstractScoreService() {
    _i4.throwOnMissingStub(this);
  }

  @override
  _i5.AbstractScoreRepository<T> get scoreRepository => (super.noSuchMethod(
        Invocation.getter(#scoreRepository),
        returnValue: _FakeAbstractScoreRepository_0<T>(
          this,
          Invocation.getter(#scoreRepository),
        ),
      ) as _i5.AbstractScoreRepository<T>);

  @override
  _i7.BaseRepository<_i1.Score<_i2.Round<_i3.GameSetting>>> get repository =>
      (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue:
            _FakeBaseRepository_1<_i1.Score<_i2.Round<_i3.GameSetting>>>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.BaseRepository<_i1.Score<_i2.Round<_i3.GameSetting>>>);

  @override
  _i9.Future<T?> getScoreByGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #getScoreByGame,
          [gameId],
        ),
        returnValue: _i9.Future<T?>.value(),
      ) as _i9.Future<T?>);

  @override
  _i9.Stream<T?> getScoreByGameStream(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #getScoreByGameStream,
          [gameId],
        ),
        returnValue: _i9.Stream<T?>.empty(),
      ) as _i9.Stream<T?>);

  @override
  _i9.Future<void> deleteScoreByGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #deleteScoreByGame,
          [gameId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i1.Score<_i2.Round<_i3.GameSetting>>?> get(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i9.Future<_i1.Score<_i2.Round<_i3.GameSetting>>?>.value(),
      ) as _i9.Future<_i1.Score<_i2.Round<_i3.GameSetting>>?>);

  @override
  _i9.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> update(_i1.Score<_i2.Round<_i3.GameSetting>>? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<String> create(_i1.Score<_i2.Round<_i3.GameSetting>>? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [t],
          ),
        )),
      ) as _i9.Future<String>);
}
