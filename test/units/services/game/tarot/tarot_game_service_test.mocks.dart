// Mocks generated by Mockito 5.4.6 from annotations
// in carg/test/units/services/game/tarot/tarot_game_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i16;

import 'package:carg/models/carg_object.dart' as _i7;
import 'package:carg/models/game/game.dart' as _i22;
import 'package:carg/models/game/setting/game_setting.dart' as _i5;
import 'package:carg/models/game/tarot.dart' as _i19;
import 'package:carg/models/player.dart' as _i21;
import 'package:carg/models/players/players.dart' as _i23;
import 'package:carg/models/score/round/round.dart' as _i4;
import 'package:carg/models/score/score.dart' as _i3;
import 'package:carg/models/score/tarot_score.dart' as _i15;
import 'package:carg/models/team.dart' as _i13;
import 'package:carg/repositories/base_repository.dart' as _i8;
import 'package:carg/repositories/impl/game/tarot_game_repository.dart' as _i18;
import 'package:carg/repositories/player/abstract_player_repository.dart'
    as _i10;
import 'package:carg/repositories/score/abstract_score_repository.dart' as _i6;
import 'package:carg/repositories/score/abstract_tarot_score_repository.dart'
    as _i2;
import 'package:carg/repositories/team/abstract_team_repository.dart' as _i11;
import 'package:carg/services/impl/player_service.dart' as _i20;
import 'package:carg/services/impl/score/tarot_score_service.dart' as _i14;
import 'package:carg/services/impl/team_service.dart' as _i24;
import 'package:carg/services/player/abstract_player_service.dart' as _i12;
import 'package:cloud_firestore/cloud_firestore.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbstractTarotScoreRepository_0 extends _i1.SmartFake
    implements _i2.AbstractTarotScoreRepository {
  _FakeAbstractTarotScoreRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractScoreRepository_1<
        T extends _i3.Score<_i4.Round<_i5.GameSetting>>> extends _i1.SmartFake
    implements _i6.AbstractScoreRepository<T> {
  _FakeAbstractScoreRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseRepository_2<T extends _i7.CargObject> extends _i1.SmartFake
    implements _i8.BaseRepository<T> {
  _FakeBaseRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_3 extends _i1.SmartFake
    implements _i9.FirebaseFirestore {
  _FakeFirebaseFirestore_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractPlayerRepository_4 extends _i1.SmartFake
    implements _i10.AbstractPlayerRepository {
  _FakeAbstractPlayerRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractTeamRepository_5 extends _i1.SmartFake
    implements _i11.AbstractTeamRepository {
  _FakeAbstractTeamRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractPlayerService_6 extends _i1.SmartFake
    implements _i12.AbstractPlayerService {
  _FakeAbstractPlayerService_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeam_7 extends _i1.SmartFake implements _i13.Team {
  _FakeTeam_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TarotScoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTarotScoreService extends _i1.Mock implements _i14.TarotScoreService {
  MockTarotScoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AbstractTarotScoreRepository get tarotScoreRepository =>
      (super.noSuchMethod(
        Invocation.getter(#tarotScoreRepository),
        returnValue: _FakeAbstractTarotScoreRepository_0(
          this,
          Invocation.getter(#tarotScoreRepository),
        ),
      ) as _i2.AbstractTarotScoreRepository);

  @override
  _i6.AbstractScoreRepository<_i15.TarotScore> get scoreRepository =>
      (super.noSuchMethod(
        Invocation.getter(#scoreRepository),
        returnValue: _FakeAbstractScoreRepository_1<_i15.TarotScore>(
          this,
          Invocation.getter(#scoreRepository),
        ),
      ) as _i6.AbstractScoreRepository<_i15.TarotScore>);

  @override
  _i8.BaseRepository<_i3.Score<_i4.Round<_i5.GameSetting>>> get repository =>
      (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue:
            _FakeBaseRepository_2<_i3.Score<_i4.Round<_i5.GameSetting>>>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.BaseRepository<_i3.Score<_i4.Round<_i5.GameSetting>>>);

  @override
  _i16.Future<_i15.TarotScore?> getScoreByGame(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScoreByGame,
          [gameId],
        ),
        returnValue: _i16.Future<_i15.TarotScore?>.value(),
      ) as _i16.Future<_i15.TarotScore?>);

  @override
  _i16.Stream<_i15.TarotScore?> getScoreByGameStream(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScoreByGameStream,
          [gameId],
        ),
        returnValue: _i16.Stream<_i15.TarotScore?>.empty(),
      ) as _i16.Stream<_i15.TarotScore?>);

  @override
  _i16.Future<void> deleteScoreByGame(String? gameId) => (super.noSuchMethod(
        Invocation.method(
          #deleteScoreByGame,
          [gameId],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i3.Score<_i4.Round<_i5.GameSetting>>?> get(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue:
            _i16.Future<_i3.Score<_i4.Round<_i5.GameSetting>>?>.value(),
      ) as _i16.Future<_i3.Score<_i4.Round<_i5.GameSetting>>?>);

  @override
  _i16.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> update(_i3.Score<_i4.Round<_i5.GameSetting>>? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> create(_i3.Score<_i4.Round<_i5.GameSetting>>? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [t],
          ),
        )),
      ) as _i16.Future<String>);
}

/// A class which mocks [TarotGameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTarotGameRepository extends _i1.Mock
    implements _i18.TarotGameRepository {
  MockTarotGameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#database),
        ),
      ) as String);

  @override
  String get environment => (super.noSuchMethod(
        Invocation.getter(#environment),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#environment),
        ),
      ) as String);

  @override
  _i9.FirebaseFirestore get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakeFirebaseFirestore_3(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i9.FirebaseFirestore);

  @override
  String get connectionString => (super.noSuchMethod(
        Invocation.getter(#connectionString),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#connectionString),
        ),
      ) as String);

  @override
  set lastFetchGameDocument(
          _i9.DocumentSnapshot<Object?>? _lastFetchGameDocument) =>
      super.noSuchMethod(
        Invocation.setter(
          #lastFetchGameDocument,
          _lastFetchGameDocument,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set connectionString(String? _connectionString) => super.noSuchMethod(
        Invocation.setter(
          #connectionString,
          _connectionString,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i19.Tarot?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i16.Future<_i19.Tarot?>.value(),
      ) as _i16.Future<_i19.Tarot?>);

  @override
  _i16.Future<List<_i19.Tarot>> getAllGamesOfPlayer(
    String? playerId,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGamesOfPlayer,
          [
            playerId,
            pageSize,
          ],
        ),
        returnValue: _i16.Future<List<_i19.Tarot>>.value(<_i19.Tarot>[]),
      ) as _i16.Future<List<_i19.Tarot>>);

  @override
  _i16.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> updateField(
    String? id,
    String? fieldName,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateField,
          [
            id,
            fieldName,
            value,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> partialUpdate(
    _i19.Tarot? t,
    Map<String, dynamic>? partToUpdate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #partialUpdate,
          [
            t,
            partToUpdate,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> update(_i19.Tarot? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> create(_i19.Tarot? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [t],
          ),
        )),
      ) as _i16.Future<String>);
}

/// A class which mocks [PlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerService extends _i1.Mock implements _i20.PlayerService {
  MockPlayerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.AbstractPlayerRepository get playerRepository => (super.noSuchMethod(
        Invocation.getter(#playerRepository),
        returnValue: _FakeAbstractPlayerRepository_4(
          this,
          Invocation.getter(#playerRepository),
        ),
      ) as _i10.AbstractPlayerRepository);

  @override
  _i8.BaseRepository<_i21.Player> get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBaseRepository_2<_i21.Player>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.BaseRepository<_i21.Player>);

  @override
  _i16.Future<String> create(_i21.Player? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [t],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<void> incrementPlayedGamesByOne(
    String? playerId,
    _i22.Game<_i23.Players, _i5.GameSetting>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementPlayedGamesByOne,
          [
            playerId,
            game,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> incrementWonGamesByOne(
    String? playerId,
    _i22.Game<_i23.Players, _i5.GameSetting>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementWonGamesByOne,
          [
            playerId,
            game,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<_i21.Player?> getPlayerOfUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayerOfUser,
          [userId],
        ),
        returnValue: _i16.Future<_i21.Player?>.value(),
      ) as _i16.Future<_i21.Player?>);

  @override
  _i16.Future<List<_i21.Player>> searchPlayers({
    String? query = '',
    _i21.Player? currentPlayer,
    bool? myPlayers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPlayers,
          [],
          {
            #query: query,
            #currentPlayer: currentPlayer,
            #myPlayers: myPlayers,
          },
        ),
        returnValue: _i16.Future<List<_i21.Player>>.value(<_i21.Player>[]),
      ) as _i16.Future<List<_i21.Player>>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i21.Player?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i16.Future<_i21.Player?>.value(),
      ) as _i16.Future<_i21.Player?>);

  @override
  _i16.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> update(_i21.Player? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [TeamService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamService extends _i1.Mock implements _i24.TeamService {
  MockTeamService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.AbstractTeamRepository get teamRepository => (super.noSuchMethod(
        Invocation.getter(#teamRepository),
        returnValue: _FakeAbstractTeamRepository_5(
          this,
          Invocation.getter(#teamRepository),
        ),
      ) as _i11.AbstractTeamRepository);

  @override
  _i12.AbstractPlayerService get playerService => (super.noSuchMethod(
        Invocation.getter(#playerService),
        returnValue: _FakeAbstractPlayerService_6(
          this,
          Invocation.getter(#playerService),
        ),
      ) as _i12.AbstractPlayerService);

  @override
  _i8.BaseRepository<_i13.Team> get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBaseRepository_2<_i13.Team>(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.BaseRepository<_i13.Team>);

  @override
  _i16.Future<_i13.Team> getTeamByPlayers(List<String?>? playerIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamByPlayers,
          [playerIds],
        ),
        returnValue: _i16.Future<_i13.Team>.value(_FakeTeam_7(
          this,
          Invocation.method(
            #getTeamByPlayers,
            [playerIds],
          ),
        )),
      ) as _i16.Future<_i13.Team>);

  @override
  _i16.Future<_i13.Team> incrementPlayedGamesByOne(
    String? id,
    _i22.Game<_i23.Players, _i5.GameSetting>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementPlayedGamesByOne,
          [
            id,
            game,
          ],
        ),
        returnValue: _i16.Future<_i13.Team>.value(_FakeTeam_7(
          this,
          Invocation.method(
            #incrementPlayedGamesByOne,
            [
              id,
              game,
            ],
          ),
        )),
      ) as _i16.Future<_i13.Team>);

  @override
  _i16.Future<_i13.Team> incrementWonGamesByOne(
    String? id,
    _i22.Game<_i23.Players, _i5.GameSetting>? game,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementWonGamesByOne,
          [
            id,
            game,
          ],
        ),
        returnValue: _i16.Future<_i13.Team>.value(_FakeTeam_7(
          this,
          Invocation.method(
            #incrementWonGamesByOne,
            [
              id,
              game,
            ],
          ),
        )),
      ) as _i16.Future<_i13.Team>);

  @override
  _i16.Future<List<_i13.Team>> getAllTeamOfPlayer(
    String? playerId,
    int? pageSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTeamOfPlayer,
          [
            playerId,
            pageSize,
          ],
        ),
        returnValue: _i16.Future<List<_i13.Team>>.value(<_i13.Team>[]),
      ) as _i16.Future<List<_i13.Team>>);

  @override
  void resetLastPointedDocument() => super.noSuchMethod(
        Invocation.method(
          #resetLastPointedDocument,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i13.Team?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i16.Future<_i13.Team?>.value(),
      ) as _i16.Future<_i13.Team?>);

  @override
  _i16.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> update(_i13.Team? t) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [t],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> create(_i13.Team? t) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [t],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #create,
            [t],
          ),
        )),
      ) as _i16.Future<String>);
}
